// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: cart.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartSvcClient is the client API for CartSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartSvcClient interface {
	UpsertCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Cart, error)
}

type cartSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCartSvcClient(cc grpc.ClientConnInterface) CartSvcClient {
	return &cartSvcClient{cc}
}

func (c *cartSvcClient) UpsertCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Cart, error) {
	out := new(Cart)
	err := c.cc.Invoke(ctx, "/cart.CartSvc/UpsertCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartSvcServer is the server API for CartSvc service.
// All implementations should embed UnimplementedCartSvcServer
// for forward compatibility
type CartSvcServer interface {
	UpsertCart(context.Context, *Cart) (*Cart, error)
}

// UnimplementedCartSvcServer should be embedded to have forward compatible implementations.
type UnimplementedCartSvcServer struct {
}

func (UnimplementedCartSvcServer) UpsertCart(context.Context, *Cart) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCart not implemented")
}

// UnsafeCartSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartSvcServer will
// result in compilation errors.
type UnsafeCartSvcServer interface {
	mustEmbedUnimplementedCartSvcServer()
}

func RegisterCartSvcServer(s grpc.ServiceRegistrar, srv CartSvcServer) {
	s.RegisterService(&CartSvc_ServiceDesc, srv)
}

func _CartSvc_UpsertCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartSvcServer).UpsertCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartSvc/UpsertCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartSvcServer).UpsertCart(ctx, req.(*Cart))
	}
	return interceptor(ctx, in, info, handler)
}

// CartSvc_ServiceDesc is the grpc.ServiceDesc for CartSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart.CartSvc",
	HandlerType: (*CartSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertCart",
			Handler:    _CartSvc_UpsertCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart.proto",
}
